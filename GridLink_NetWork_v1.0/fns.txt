peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.gridlink.com --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n Gridlink \
--peerAddresses localhost:7051 --tlsRootCertFiles $PRODUCER_PEER_TLSROOTCERT \
--peerAddresses localhost:9051 --tlsRootCertFiles $CONSUMER_PEER_TLSROOTCERT \
--peerAddresses localhost:11051 --tlsRootCertFiles $UTILITYCOMPANY_PEER_TLSROOTCERT \
--peerAddresses localhost:12051 --tlsRootCertFiles $REGULATORYBODY_PEER_TLSROOTCERT \
-c '{"function":"buyEnergyByUtility","Args":["pd-01","100"]}'


peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.gridlink.com --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n Gridlink \
--peerAddresses localhost:7051 --tlsRootCertFiles $PRODUCER_PEER_TLSROOTCERT \
--peerAddresses localhost:9051 --tlsRootCertFiles $CONSUMER_PEER_TLSROOTCERT \
--peerAddresses localhost:11051 --tlsRootCertFiles $UTILITYCOMPANY_PEER_TLSROOTCERT \
--peerAddresses localhost:12051 --tlsRootCertFiles $REGULATORYBODY_PEER_TLSROOTCERT \
-c '{"function":"registerProducer","Args":["pd-01","100","6"]}'



  async registerProducer(ctx, producerId, energy, pricePerKwh) {
    const producer = {
      id: producerId,
      type: 'producer',
      energy: parseInt(energy),
      pricePerKwh: parseFloat(pricePerKwh),
    };
    await ctx.stub.putState(producerId, Buffer.from(JSON.stringify(producer)));
    return JSON.stringify(producer);
  }


peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.gridlink.com --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n Gridlink \
--peerAddresses localhost:7051 --tlsRootCertFiles $PRODUCER_PEER_TLSROOTCERT \
--peerAddresses localhost:9051 --tlsRootCertFiles $CONSUMER_PEER_TLSROOTCERT \
--peerAddresses localhost:11051 --tlsRootCertFiles $UTILITYCOMPANY_PEER_TLSROOTCERT \
--peerAddresses localhost:12051 --tlsRootCertFiles $REGULATORYBODY_PEER_TLSROOTCERT \
-c '{"function":"processOre","Args":["oreId-01", "refinedId-01", "99.9", "2024-11-03"]}'



peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.gridlink.com --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n Gridlink \
--peerAddresses localhost:7051 --tlsRootCertFiles $PRODUCER_PEER_TLSROOTCERT \
--peerAddresses localhost:9051 --tlsRootCertFiles $CONSUMER_PEER_TLSROOTCERT \
--peerAddresses localhost:11051 --tlsRootCertFiles $UTILITYCOMPANY_PEER_TLSROOTCERT \
--peerAddresses localhost:12051 --tlsRootCertFiles $REGULATORYBODY_PEER_TLSROOTCERT \
-c '{"function":"createComponent","Args":["componentId-01", "refinedId-01", "Gridlink Manufacturer", "2024-11-03"]}'



peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.gridlink.com --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n Gridlink \
--peerAddresses localhost:7051 --tlsRootCertFiles $PRODUCER_PEER_TLSROOTCERT \
--peerAddresses localhost:9051 --tlsRootCertFiles $CONSUMER_PEER_TLSROOTCERT \
--peerAddresses localhost:11051 --tlsRootCertFiles $UTILITYCOMPANY_PEER_TLSROOTCERT \
--peerAddresses localhost:12051 --tlsRootCertFiles $REGULATORYBODY_PEER_TLSROOTCERT \
-c '{"function":"updateComponent","Args":["componentId-01", "Updated Manufacturer", "2024-11-04"]}'




peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.gridlink.com --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n Gridlink \
--peerAddresses localhost:7051 --tlsRootCertFiles $PRODUCER_PEER_TLSROOTCERT \
--peerAddresses localhost:9051 --tlsRootCertFiles $CONSUMER_PEER_TLSROOTCERT \
--peerAddresses localhost:11051 --tlsRootCertFiles $UTILITYCOMPANY_PEER_TLSROOTCERT \
--peerAddresses localhost:12051 --tlsRootCertFiles $REGULATORYBODY_PEER_TLSROOTCERT \
-c '{"function":"deleteComponent","Args":["componentId-01"]}'



peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.gridlink.com --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n Gridlink \
--peerAddresses localhost:7051 --tlsRootCertFiles $PRODUCER_PEER_TLSROOTCERT \
--peerAddresses localhost:9051 --tlsRootCertFiles $CONSUMER_PEER_TLSROOTCERT \
--peerAddresses localhost:11051 --tlsRootCertFiles $UTILITYCOMPANY_PEER_TLSROOTCERT \
--peerAddresses localhost:12051 --tlsRootCertFiles $REGULATORYBODY_PEER_TLSROOTCERT \
-c '{"function":"certifyEthicalSource","Args":["certificationId-01", "oreId-01", "Certifying Agency", "compliant", "2024-11-03"]}'



peer chaincode query -C $CHANNEL_NAME -n Gridlink \
-c '{"function":"queryByStatus","Args":["mined"]}'


peer chaincode query -C $CHANNEL_NAME -n Gridlink \
-c '{"function":"queryByOrigin","Args":["Congo"]}'



peer chaincode query -C $CHANNEL_NAME -n Gridlink \
-c '{"function":"getPrivateDetails","Args":["collectionManufacturingDetails", "componentId-01"]}'


peer chaincode query -C $CHANNEL_NAME -n Gridlink \
-c '{"function":"getOreHistory","Args":["oreId-01"]}'
